// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/access/interfaces/repository.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "gitlab.mai.ru/cicada-chess/backend/auth-service/internal/domain/access/entity"
)

// MockAccessRepository is a mock of AccessRepository interface.
type MockAccessRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccessRepositoryMockRecorder
}

// MockAccessRepositoryMockRecorder is the mock recorder for MockAccessRepository.
type MockAccessRepositoryMockRecorder struct {
	mock *MockAccessRepository
}

// NewMockAccessRepository creates a new mock instance.
func NewMockAccessRepository(ctrl *gomock.Controller) *MockAccessRepository {
	mock := &MockAccessRepository{ctrl: ctrl}
	mock.recorder = &MockAccessRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessRepository) EXPECT() *MockAccessRepositoryMockRecorder {
	return m.recorder
}

// GetProtectedUrl mocks base method.
func (m *MockAccessRepository) GetProtectedUrl(ctx context.Context, url string) (*entity.ProtectedUrl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProtectedUrl", ctx, url)
	ret0, _ := ret[0].(*entity.ProtectedUrl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProtectedUrl indicates an expected call of GetProtectedUrl.
func (mr *MockAccessRepositoryMockRecorder) GetProtectedUrl(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProtectedUrl", reflect.TypeOf((*MockAccessRepository)(nil).GetProtectedUrl), ctx, url)
}
